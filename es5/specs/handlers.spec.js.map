{"version":3,"sources":["../../src/specs/handlers.spec.js"],"names":["require","call","handlers","functions","badHandler","badHandlerRejection","valueReturningHandler","promiseReturningHandler","expectError","test","actual","expected","expect","toEqual","message","fail"],"mappings":";;eAAiBA,QAAQ,UAAR,C;IAATC,I,YAAAA,I;;gBACwBD,QAAQ,WAAR,C;IAAxBE,Q,aAAAA,Q;IAAUC,S,aAAAA,S;;IAEhBC,U,GAIED,S,CAJFC,U;IACAC,mB,GAGEF,S,CAHFE,mB;IACAC,qB,GAEEH,S,CAFFG,qB;IACAC,uB,GACEJ,S,CADFI,uB;;gBAEsBP,QAAQ,aAAR,C;IAAhBQ,W,aAAAA,W;;AAERC,KAAK,sDAAL,EAA6D,kBAAY;AACvE,MAAMC,SAAS,MAAMT,KAAK,EAAL,EAASC,QAAT,EAAmBI,qBAAnB,EAA0C,KAA1C,CAArB;AACA,MAAMK,WAAW,KAAjB;AACAC,SAAOF,MAAP,EAAeG,OAAf,CAAuBF,QAAvB;AACD,CAJD;;AAMAF,KAAK,4CAAL,EAAmD,kBAAY;AAC7D,MAAMC,SAAS,MAAMT,KAAK,EAAL,EAASC,QAAT,EAAmBK,uBAAnB,EAA4C,KAA5C,CAArB;AACA,MAAMI,WAAW,KAAjB;AACAC,SAAOF,MAAP,EAAeG,OAAf,CAAuBF,QAAvB;AACD,CAJD;;AAMAF,KAAK,4DAAL,EAAmE,kBAAY;AAC7E,MAAI;AACF,UAAMR,KAAK,EAAL,EAASC,QAAT,EAAmBE,UAAnB,CAAN;AACD,GAFD,CAEE,OAAOM,MAAP,EAAe;AACf,QAAMI,UAAU,MAAhB;AACA,WAAON,YAAYE,MAAZ,EAAoBI,OAApB,CAAP;AACD;AACDC,OAAK,0BAAL;AACD,CARD;;AAUAN,KAAK,6DAAL,EAAoE,kBAAY;AAC9E,MAAI;AACF,UAAMR,KAAK,EAAL,EAASC,QAAT,EAAmBG,mBAAnB,CAAN;AACD,GAFD,CAEE,OAAOK,MAAP,EAAe;AACf,QAAMI,UAAU,MAAhB;AACA,WAAON,YAAYE,MAAZ,EAAoBI,OAApB,CAAP;AACD;AACDC,OAAK,0BAAL;AACD,CARD","file":"handlers.spec.js","sourcesContent":["const { call } = require('../index')\nconst { handlers, functions } = require('./effects')\nconst {\n  badHandler,\n  badHandlerRejection,\n  valueReturningHandler,\n  promiseReturningHandler\n} = functions\nconst { expectError } = require('./test-util')\n\ntest('handlers should be able to return non-promise values', async () => {\n  const actual = await call({}, handlers, valueReturningHandler, 'bar')\n  const expected = 'bar'\n  expect(actual).toEqual(expected)\n})\n\ntest('handlers should be able to return promises', async () => {\n  const actual = await call({}, handlers, promiseReturningHandler, 'bar')\n  const expected = 'bar'\n  expect(actual).toEqual(expected)\n})\n\ntest('call should reject when a handler throws and is not caught', async () => {\n  try {\n    await call({}, handlers, badHandler)\n  } catch (actual) {\n    const message = 'oops'\n    return expectError(actual, message)\n  }\n  fail('Function did not reject.')\n})\n\ntest('call should reject when a handler rejects and is not caught', async () => {\n  try {\n    await call({}, handlers, badHandlerRejection)\n  } catch (actual) {\n    const message = 'oops'\n    return expectError(actual, message)\n  }\n  fail('Function did not reject.')\n})\n"]}