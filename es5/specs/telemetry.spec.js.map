{"version":3,"sources":["../../src/specs/telemetry.spec.js"],"names":["require","call","handlers","functions","cmds","basicMultistep","badHandler","sleep","test","telemetry","onCommandComplete","push","t","config","name","now","Date","expect","length","toEqual","forEach","i","message","success","command","echo","latency","toBeLessThan","start","toBeGreaterThanOrEqual","end","index","step","result","e","die"],"mappings":";;eAAiBA,QAAQ,UAAR,C;IAATC,I,YAAAA,I;;gBAC8BD,QAAQ,WAAR,C;IAA9BE,Q,aAAAA,Q;IAAUC,S,aAAAA,S;IAAWC,I,aAAAA,I;;IACrBC,c,GAA+BF,S,CAA/BE,c;IAAgBC,U,GAAeH,S,CAAfG,U;;gBACNN,QAAQ,aAAR,C;IAAVO,K,aAAAA,K;;AAERC,KAAK,WAAL,EAAkB,kBAAY;AAC5B,MAAIC,YAAY,EAAhB;AACA,MAAMC,oBAAoB,SAApBA,iBAAoB,IAAK;AAC7BD,cAAUE,IAAV,CAAeC,CAAf;AACD,GAFD;AAGA,MAAMC,SAAS,EAAEH,oCAAF,EAAqBI,MAAM,WAA3B,EAAf;AACA,MAAMC,MAAMC,KAAKD,GAAL,EAAZ;AACA,QAAMd,KAAKY,MAAL,EAAaX,QAAb,EAAuBG,cAAvB,EAAuC,KAAvC,CAAN;AACAY,SAAOR,UAAUS,MAAjB,EAAyBC,OAAzB,CAAiC,CAAjC;AACAV,YAAUW,OAAV,CAAkB,UAACR,CAAD,EAAIS,CAAJ,EAAU;AAC1B,QAAMC,UAAU,SAASD,IAAI,CAAb,CAAhB;AACAJ,WAAOL,EAAEW,OAAT,EAAkBJ,OAAlB,CAA0B,IAA1B;AACAF,WAAOL,EAAEY,OAAT,EAAkBL,OAAlB,CAA0Bf,KAAKqB,IAAL,CAAUH,OAAV,CAA1B;AACAL,WAAOL,EAAEc,OAAT,EAAkBC,YAAlB,CAA+B,CAA/B;AACAV,WAAOL,EAAEgB,KAAT,EAAgBC,sBAAhB,CAAuCd,GAAvC;AACAE,WAAOL,EAAEkB,GAAT,EAAcD,sBAAd,CAAqCjB,EAAEgB,KAAvC;AACAX,WAAOL,EAAEmB,KAAT,EAAgBZ,OAAhB,CAAwB,CAAxB;AACAF,WAAOL,EAAEoB,IAAT,EAAeb,OAAf,CAAuBE,CAAvB;AACAJ,WAAOL,EAAEqB,MAAT,EAAiBd,OAAjB,CAAyBG,OAAzB;AACAL,WAAOL,EAAEC,MAAT,EAAiBM,OAAjB,CAAyBN,MAAzB;AACD,GAXD;AAYD,CArBD;;AAuBAL,KAAK,oBAAL,EAA2B,kBAAY;AACrC,MAAIC,kBAAJ;AACA,MAAMC,oBAAoB,SAApBA,iBAAoB,IAAK;AAC7BD,gBAAYG,CAAZ;AACD,GAFD;AAGA,MAAMC,SAAS,EAAEH,oCAAF,EAAqBI,MAAM,WAA3B,EAAf;AACA,MAAMC,MAAMC,KAAKD,GAAL,EAAZ;AACA,MAAMO,UAAU,MAAhB;AACA,MAAI;AACF,UAAMrB,KAAKY,MAAL,EAAaX,QAAb,EAAuBI,UAAvB,EAAmCgB,OAAnC,CAAN;AACD,GAFD,CAEE,OAAOY,CAAP,EAAU,CAAE;AACd,QAAM3B,MAAM,EAAN,CAAN;AACAU,SAAOR,UAAUc,OAAjB,EAA0BJ,OAA1B,CAAkC,KAAlC;AACAF,SAAOR,UAAUe,OAAjB,EAA0BL,OAA1B,CAAkCf,KAAK+B,GAAL,CAASb,OAAT,CAAlC;AACAL,SAAOR,UAAUiB,OAAjB,EAA0BC,YAA1B,CAAuC,CAAvC;AACAV,SAAOR,UAAUmB,KAAjB,EAAwBC,sBAAxB,CAA+Cd,GAA/C;AACAE,SAAOR,UAAUqB,GAAjB,EAAsBD,sBAAtB,CAA6CpB,UAAUmB,KAAvD;AACAX,SAAOR,UAAUsB,KAAjB,EAAwBZ,OAAxB,CAAgC,CAAhC;AACAF,SAAOR,UAAUuB,IAAjB,EAAuBb,OAAvB,CAA+B,CAA/B;AACAF,SAAOR,UAAUwB,MAAV,CAAiBX,OAAxB,EAAiCH,OAAjC,CAAyC,MAAzC;AACAF,SAAOR,UAAUI,MAAjB,EAAyBM,OAAzB,CAAiCN,MAAjC;AACD,CArBD","file":"telemetry.spec.js","sourcesContent":["const { call } = require('../index')\nconst { handlers, functions, cmds } = require('./effects')\nconst { basicMultistep, badHandler } = functions\nconst { sleep } = require('./test-util')\n\ntest('telemetry', async () => {\n  let telemetry = []\n  const onCommandComplete = t => {\n    telemetry.push(t)\n  }\n  const config = { onCommandComplete, name: 'telemetry' }\n  const now = Date.now()\n  await call(config, handlers, basicMultistep, 'foo')\n  expect(telemetry.length).toEqual(2)\n  telemetry.forEach((t, i) => {\n    const message = 'foo' + (i + 1)\n    expect(t.success).toEqual(true)\n    expect(t.command).toEqual(cmds.echo(message))\n    expect(t.latency).toBeLessThan(5)\n    expect(t.start).toBeGreaterThanOrEqual(now)\n    expect(t.end).toBeGreaterThanOrEqual(t.start)\n    expect(t.index).toEqual(0)\n    expect(t.step).toEqual(i)\n    expect(t.result).toEqual(message)\n    expect(t.config).toEqual(config)\n  })\n})\n\ntest('telemetry on error', async () => {\n  let telemetry\n  const onCommandComplete = t => {\n    telemetry = t\n  }\n  const config = { onCommandComplete, name: 'telemetry' }\n  const now = Date.now()\n  const message = 'oops'\n  try {\n    await call(config, handlers, badHandler, message)\n  } catch (e) {}\n  await sleep(10)\n  expect(telemetry.success).toEqual(false)\n  expect(telemetry.command).toEqual(cmds.die(message))\n  expect(telemetry.latency).toBeLessThan(5)\n  expect(telemetry.start).toBeGreaterThanOrEqual(now)\n  expect(telemetry.end).toBeGreaterThanOrEqual(telemetry.start)\n  expect(telemetry.index).toEqual(0)\n  expect(telemetry.step).toEqual(0)\n  expect(telemetry.result.message).toEqual('oops')\n  expect(telemetry.config).toEqual(config)\n})\n"]}