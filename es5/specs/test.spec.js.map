{"version":3,"sources":["../../src/specs/test.spec.js"],"names":["singleLine","yieldArray","require","functions","cmds","basic","basicMultistep","basicParallel","basicMultistepParallel","basicEmpty","basicMultiArg","eitherTestError","eitherTestEmpty","asyncTest","badHandler","testFn","testFnV2","args","id","httpGet","s1","type","testSingleLine","testYieldArray","test","echo","yieldCmd","yieldReturns","returns","s2","c","c1","c2","s3","s4","either","die","Error","async","foo","undefined","e","expect","message","toEqual"],"mappings":"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","file":"test.spec.js","sourcesContent":["const { functions, cmds } = require('./effects')\nconst {\n  basic,\n  basicMultistep,\n  basicParallel,\n  basicMultistepParallel,\n  basicEmpty,\n  basicMultiArg,\n  eitherTestError,\n  eitherTestEmpty,\n  asyncTest,\n  badHandler\n} = functions\nconst { testFn, testFnV2, args } = require('../test')\n\nfunction* singleLine(id) {\n  const s1 = yield cmds.httpGet(`http://example.com/api/v1/users/${id}`)\n  return s1\n}\n\nfunction* yieldArray() {\n  const s1 = yield [{ type: 'test' }]\n  return s1\n}\n\nconst testSingleLine = testFn(singleLine)\nconst testYieldArray = testFn(yieldArray)\n\ntest(\n  'testFn should curry',\n  testFn(basic)(() => {\n    // prettier-ignore\n    return [\n      [['foo'], cmds.echo('foo')],\n      ['foo', 'foo']\n    ]\n  })\n)\n\ntest(\n  'testFn should pass (basic)',\n  testFn(basic, () => {\n    // prettier-ignore\n    return [\n      [['foo'], cmds.echo('foo')],\n      ['foo', 'foo']\n    ]\n  })\n)\n\n// Basic\n\ntest(\n  'testFn semantic should pass (basic)',\n  testFn(basic, () => {\n    //  prettier-ignore\n    return args('foo')\n      .yieldCmd(cmds.echo('foo')).yieldReturns('foo')\n      .returns('foo')\n  })\n)\n\ntest(\n  'testFnV2 should pass (basic)',\n  testFnV2(basic, () => {\n    // prettier-ignore\n    return [\n      ['foo'],\n      [cmds.echo('foo'), 'foo'],\n      'foo'\n    ]\n  })\n)\n\ntest(\n  'testFn should pass (basicMultiArg)',\n  testFn(basicMultiArg, () => {\n    // prettier-ignore\n    return [\n      [['foo', 'bar'], cmds.echo('foobar')],\n      ['foobar', 'foobar']\n    ]\n  })\n)\n\n// Basic w multiple arguments\n\ntest(\n  'testFn should pass (basicMultiArg)',\n  testFn(basicMultiArg, () => {\n    // prettier-ignore\n    return [\n      [['foo', 'bar'], cmds.echo('foobar')],\n      ['foobar', 'foobar']\n    ]\n  })\n)\n\ntest(\n  'testFn semantic should pass (basicMultiArg)',\n  testFn(basicMultiArg, () => {\n    // prettier-ignore\n    return args('foo', 'bar')\n      .yieldCmd(cmds.echo('foobar')).yieldReturns('foobar')\n      .returns('foobar')\n  })\n)\n\ntest(\n  'testFn semantic should pass (basicMultiArg)',\n  testFnV2(basicMultiArg, () => {\n    // prettier-ignore\n    return [\n      ['foo', 'bar'],\n      [cmds.echo('foobar'), 'foobar'],\n      'foobar'\n    ]\n  })\n)\n\n//  Basic with multiple steps\n\ntest(\n  'testFn should pass (basicMultistep)',\n  testFn(basicMultistep, () => {\n    // prettier-ignore\n    return [\n      [['foo'], cmds.echo('foo1')],\n      ['foo1', cmds.echo('foo2')],\n      ['foo2', {s1: 'foo1', s2: 'foo2'}]\n    ]\n  })\n)\n\ntest(\n  'testFn semantic should pass (basicMultistep)',\n  testFn(basicMultistep, () => {\n    // prettier-ignore\n    return args('foo')\n      .yieldCmd(cmds.echo('foo1')).yieldReturns('foo1')\n      .yieldCmd(cmds.echo('foo2')).yieldReturns('foo2')\n      .returns({ s1: 'foo1', s2: 'foo2' })\n  })\n)\n\ntest(\n  'testFnV2 should pass (basicMultistep)',\n  testFnV2(basicMultistep, () => {\n    // prettier-ignore\n    return [\n      ['foo'],\n      [cmds.echo('foo1'), 'foo1'],\n      [cmds.echo('foo2'), 'foo2'],\n      { s1: 'foo1', s2: 'foo2' }\n    ]\n  })\n)\n\n// Basic with parallel commands\n\ntest(\n  'testFn should pass (basicParallel)',\n  testFn(basicParallel, () => {\n    const c = [cmds.echo('foo'), cmds.echo('foo')]\n    // prettier-ignore\n    return [\n      [['foo'], c],\n      [['foo', 'foo'], {s1: 'foo1', s2: 'foo2'}]\n    ]\n  })\n)\n\ntest(\n  'testFn semantic should pass (basicParallel)',\n  testFn(basicParallel, () => {\n    const c = [cmds.echo('foo'), cmds.echo('foo')]\n    // prettier-ignore\n    return args('foo')\n      .yieldCmd(c).yieldReturns(['foo', 'foo'])\n      .returns({ s1: 'foo1', s2: 'foo2' })\n  })\n)\n\ntest(\n  'testFnV2 should pass (basicParallel)',\n  testFnV2(basicParallel, () => {\n    const c = [cmds.echo('foo'), cmds.echo('foo')]\n    // prettier-ignore\n    return [\n      ['foo'],\n      [c, ['foo', 'foo']],\n      { s1: 'foo1', s2: 'foo2' }\n    ]\n  })\n)\n\n//  Basic with multiple steps of parallel commands\n\ntest(\n  'testFn should pass (basicMultistepParallel)',\n  testFn(basicMultistepParallel, () => {\n    const c1 = [cmds.echo('foo'), cmds.echo('foo')]\n    const c2 = [cmds.echo('foo'), cmds.echo('foo')]\n    // prettier-ignore\n    return [\n      [['foo'], c1],\n      [['foo', 'foo'], c2],\n      [['foo', 'foo'], {s1: 'foo1', s2: 'foo2', s3: 'foo3', s4: 'foo4'}]\n    ]\n  })\n)\n\ntest(\n  'testFn semantic should pass (basicMultistepParallel)',\n  testFn(basicMultistepParallel, () => {\n    const c1 = [cmds.echo('foo'), cmds.echo('foo')]\n    const c2 = [cmds.echo('foo'), cmds.echo('foo')]\n    // prettier-ignore\n    return args('foo')\n      .yieldCmd(c1).yieldReturns(['foo', 'foo'])\n      .yieldCmd(c2).yieldReturns(['foo', 'foo'])\n      .returns({ s1: 'foo1', s2: 'foo2', s3: 'foo3', s4: 'foo4' })\n  })\n)\n\ntest(\n  'testFnV2 should pass (basicMultistepParallel)',\n  testFnV2(basicMultistepParallel, () => {\n    const c1 = [cmds.echo('foo'), cmds.echo('foo')]\n    const c2 = [cmds.echo('foo'), cmds.echo('foo')]\n    // prettier-ignore\n    return [\n      ['foo'],\n      [c1, ['foo', 'foo']],\n      [c2, ['foo', 'foo']],\n      {s1: 'foo1', s2: 'foo2', s3: 'foo3', s4: 'foo4'}\n    ]\n  })\n)\n\n//  Basic with empty args\n\ntest(\n  'testFn should pass (basicEmpty)',\n  testFn(basicEmpty, () => {\n    // prettier-ignore\n    return [\n      [[null], []],\n      [[], []]\n    ]\n  })\n)\n\ntest(\n  'testFn semantic should pass (basicEmpty)',\n  testFn(basicEmpty, () => {\n    // prettier-ignore\n    return args(null)\n      .yieldCmd([]).yieldReturns([])\n      .returns([])\n  })\n)\n\ntest(\n  'testFnV2 should pass (basicEmpty)',\n  testFnV2(basicEmpty, () => {\n    // prettier-ignore\n    return [\n      [null],\n      [[], []],\n      []\n    ]\n  })\n)\n\n// Either test with error\n\ntest(\n  'testFn should pass (eitherTestError)',\n  testFn(eitherTestError, () => {\n    // prettier-ignore\n    return [\n      [[null], cmds.either(cmds.die('oops'), 'foo')],\n      ['foo', 'foo']\n    ]\n  })\n)\n\ntest(\n  'testFn semantic should pass (eitherTestError)',\n  testFn(eitherTestError, () => {\n    // prettier-ignore\n    return args(null)\n      .yieldCmd(cmds.either(cmds.die('oops'), 'foo')).yieldReturns('foo')\n      .returns('foo')\n  })\n)\n\ntest(\n  'testFnV2 semantic should pass (eitherTestError)',\n  testFnV2(eitherTestError, () => {\n    // prettier-ignore\n    return [\n      [null],\n      [cmds.either(cmds.die('oops'), 'foo'), 'foo'],\n      'foo'\n    ]\n  })\n)\n\n//  Handler error handling\n\ntest(\n  'testFn should handle errors (badHandler)',\n  testFn(badHandler, () => {\n    // prettier-ignore\n    return [\n      [[null], cmds.die('oops')],\n      [new Error('oops!'), new Error('oops!')]\n    ]\n  })\n)\n\ntest(\n  'testFn semantic should handle errors (badHandler)',\n  testFn(badHandler, () => {\n    // prettier-ignore\n    return args([null])\n      .yieldCmd(cmds.die('oops')).yieldReturns(new Error('oops!'))\n      .returns(new Error('oops!'))\n  })\n)\n\ntest(\n  'testFnV2 should handle errors (badHandler)',\n  testFnV2(badHandler, () => {\n    // prettier-ignore\n    return [\n      [null],\n      [cmds.die('oops'), new Error('oops!')],\n      new Error('oops!')\n    ]\n  })\n)\n\n// Either test empty\n\ntest(\n  'testFn should pass (eitherTestEmpty)',\n  testFn(eitherTestEmpty, () => {\n    // prettier-ignore\n    return [\n      [[null], cmds.either(cmds.echo(null), 'foo')],\n      ['foo', 'foo']\n    ]\n  })\n)\n\ntest(\n  'testFn semantic should pass (eitherTestEmpty)',\n  testFn(eitherTestEmpty, () => {\n    // prettier-ignore\n    return args(null)\n      .yieldCmd(cmds.either(cmds.echo(null), 'foo')).yieldReturns('foo')\n      .returns('foo')\n  })\n)\n\ntest(\n  'testFnV2 should pass (eitherTestEmpty)',\n  testFnV2(eitherTestEmpty, () => {\n    // prettier-ignore\n    return [\n      [null],\n      [cmds.either(cmds.echo(null), 'foo'), 'foo'],\n      'foo'\n    ]\n  })\n)\n\n//  Async cmd\n\ntest(\n  'testFn should pass (asyncTest)',\n  testFn(asyncTest, () => {\n    // prettier-ignore\n    return [\n      [[null], cmds.async({ type: 'test' })],\n      [null, null]\n    ]\n  })\n)\n\ntest(\n  'testFn semantic should pass (asyncTest)',\n  testFn(asyncTest, () => {\n    // prettier-ignore\n    return args(null)\n      .yieldCmd(cmds.async({ type: 'test' })).yieldReturns(null)\n      .returns(null)\n  })\n)\n\ntest(\n  'testFnV2 should pass (asyncTest)',\n  testFnV2(asyncTest, () => {\n    // prettier-ignore\n    return [\n      [null],\n      [cmds.async({ type: 'test' }), null],\n      null\n    ]\n  })\n)\n\n//  Single line\n\ntest(\n  'single line should pass',\n  testSingleLine(() => {\n    //  prettier-ignore\n    return [\n      [['123'], cmds.httpGet('http://example.com/api/v1/users/123')],\n      [{foo: 'bar'}, {foo: 'bar'}]\n    ]\n  })\n)\n\ntest(\n  'testFn semantic single line should not fail',\n  testSingleLine(() => {\n    // prettier-ignore\n    return args('123')\n      .yieldCmd(cmds.httpGet('http://example.com/api/v1/users/123')).yieldReturns({ foo: 'bar' })\n      .returns({ foo: 'bar' })\n  })\n)\n\ntest('testFn should give proper error message if yielding array but no results', () => {\n  try {\n    testYieldArray(() => {\n      //  prettier-ignore\n      return [\n        [undefined, [{type: 'test'}]]\n      ]\n    })()\n  } catch (e) {\n    expect(e.message).toEqual(\n      'Your spec does not have as many steps as your function.  Are you missing a return line?'\n    )\n  }\n})\n\ntest('testFn should give proper error message if spec is returning undefined', () => {\n  try {\n    testYieldArray(() => {})()\n  } catch (e) {\n    expect(e.message).toEqual(\n      'Your spec must return an array of tuples.  It is currently returning a value of type \"undefined\".'\n    )\n  }\n})\n\ntest('testFn should give proper error message if spec is returning an object', () => {\n  try {\n    testYieldArray(() => {\n      return {}\n    })()\n  } catch (e) {\n    expect(e.message).toEqual(\n      'Your spec must return an array of tuples.  It is currently returning a value of type \"object\".'\n    )\n  }\n})\n\ntest('testFn should give proper error message if spec is returning an string', () => {\n  try {\n    testYieldArray(() => {\n      return 'what?'\n    })()\n  } catch (e) {\n    expect(e.message).toEqual(\n      'Your spec must return an array of tuples.  It is currently returning a value of type \"string\".'\n    )\n  }\n})\n"]}