{"version":3,"sources":["../../src/specs/errors.spec.js"],"names":["require","call","handlers","functions","badHandler","throwAtYield","throwAtYieldRecovery","functionErrorTest","expectError","test","undefined","actual","message","fail","expected","expect","toEqual"],"mappings":";;eAAiBA,QAAQ,UAAR,C;IAATC,I,YAAAA,I;;gBACwBD,QAAQ,WAAR,C;IAAxBE,Q,aAAAA,Q;IAAUC,S,aAAAA,S;;IAEhBC,U,GAIED,S,CAJFC,U;IACAC,Y,GAGEF,S,CAHFE,Y;IACAC,oB,GAEEH,S,CAFFG,oB;IACAC,iB,GACEJ,S,CADFI,iB;;gBAEsBP,QAAQ,aAAR,C;IAAhBQ,W,aAAAA,W;;AAERC,KAAK,8CAAL,EAAqD,kBAAY;AAC/D,MAAI;AACF,UAAMR,KAAK,EAAL,EAASC,QAAT,EAAmBQ,SAAnB,CAAN;AACD,GAFD,CAEE,OAAOC,MAAP,EAAe;AACf,QAAMC,UACJ,6DADF;AAEA,WAAOJ,YAAYG,MAAZ,EAAoBC,OAApB,CAAP;AACD;AACDC,OAAK,0BAAL;AACD,CATD;;AAWAJ,KAAK,mCAAL,EAA0C,kBAAY;AACpD,MAAI;AACF,UAAMR,KAAK,EAAL,EAASC,QAAT,EAAmBK,iBAAnB,CAAN;AACD,GAFD,CAEE,OAAOI,MAAP,EAAe;AACf,QAAMC,UAAU,OAAhB;AACA,WAAOJ,YAAYG,MAAZ,EAAoBC,OAApB,CAAP;AACD;AACDC,OAAK,0BAAL;AACD,CARD;;AAUAJ,KAAK,sCAAL,EAA6C,kBAAY;AACvD,MAAME,SAAS,MAAMV,KAAK,EAAL,EAASC,QAAT,EAAmBG,YAAnB,CAArB;AACA,MAAMS,WAAW,SAAjB;AACAC,SAAOJ,MAAP,EAAeK,OAAf,CAAuBF,QAAvB;AACD,CAJD;;AAMAL,KAAK,kDAAL,EAAyD,kBAAY;AACnE,MAAME,SAAS,MAAMV,KAAK,EAAL,EAASC,QAAT,EAAmBI,oBAAnB,CAArB;AACA,MAAMQ,WAAW,KAAjB;AACAC,SAAOJ,MAAP,EAAeK,OAAf,CAAuBF,QAAvB;AACD,CAJD","file":"errors.spec.js","sourcesContent":["const { call } = require('../index')\nconst { handlers, functions } = require('./effects')\nconst {\n  badHandler,\n  throwAtYield,\n  throwAtYieldRecovery,\n  functionErrorTest\n} = functions\nconst { expectError } = require('./test-util')\n\ntest('call should reject for an undefined function', async () => {\n  try {\n    await call({}, handlers, undefined)\n  } catch (actual) {\n    const message =\n      'A function is required. Perhaps your function is undefined?'\n    return expectError(actual, message)\n  }\n  fail('Function did not reject.')\n})\n\ntest('call should catch function errors', async () => {\n  try {\n    await call({}, handlers, functionErrorTest)\n  } catch (actual) {\n    const message = 'oops!'\n    return expectError(actual, message)\n  }\n  fail('Function did not reject.')\n})\n\ntest('call should throw error at the yield', async () => {\n  const actual = await call({}, handlers, throwAtYield)\n  const expected = 'caught!'\n  expect(actual).toEqual(expected)\n})\n\ntest('call should throw error at the yield and recover', async () => {\n  const actual = await call({}, handlers, throwAtYieldRecovery)\n  const expected = 'foo'\n  expect(actual).toEqual(expected)\n})\n"]}