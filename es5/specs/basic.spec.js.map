{"version":3,"sources":["../../src/specs/basic.spec.js"],"names":["require","call","handlers","functions","basic","basicMultistep","basicParallel","basicMultistepParallel","basicEmpty","basicMultiArg","test","expected","actual","expect","toEqual","s1","s2","s3","s4"],"mappings":";;eAAiBA,QAAQ,UAAR,C;IAATC,I,YAAAA,I;;gBACwBD,QAAQ,WAAR,C;IAAxBE,Q,aAAAA,Q;IAAUC,S,aAAAA,S;;IAEhBC,K,GAMED,S,CANFC,K;IACAC,c,GAKEF,S,CALFE,c;IACAC,a,GAIEH,S,CAJFG,a;IACAC,sB,GAGEJ,S,CAHFI,sB;IACAC,U,GAEEL,S,CAFFK,U;IACAC,a,GACEN,S,CADFM,a;;;AAGFC,KAAK,OAAL,EAAc,kBAAY;AACxB,MAAMC,WAAW,KAAjB;AACA,MAAMC,SAAS,MAAMX,KAAK,EAAL,EAASC,QAAT,EAAmBE,KAAnB,EAA0BO,QAA1B,CAArB;AACAE,SAAOD,MAAP,EAAeE,OAAf,CAAuBH,QAAvB;AACD,CAJD;;AAMAD,KAAK,gDAAL,EAAuD,kBAAY;AACjE,MAAMC,WAAW,CAAC,KAAD,EAAQ,KAAR,CAAjB;AACA,MAAMC,SAAS,MAAMX,KAAK,EAAL,EAASC,QAAT,EAAmBE,KAAnB,EAA0BO,QAA1B,CAArB;AACAE,SAAOD,MAAP,EAAeE,OAAf,CAAuBH,QAAvB;AACD,CAJD;;AAMAD,KAAK,eAAL,EAAsB,kBAAY;AAChC,MAAME,SAAS,MAAMX,KAAK,EAAL,EAASC,QAAT,EAAmBO,aAAnB,EAAkC,KAAlC,EAAyC,KAAzC,CAArB;AACAI,SAAOD,MAAP,EAAeE,OAAf,CAAuB,QAAvB;AACD,CAHD;;AAKAJ,KAAK,gBAAL,EAAuB,kBAAY;AACjC,MAAME,SAAS,MAAMX,KAAK,EAAL,EAASC,QAAT,EAAmBG,cAAnB,EAAmC,KAAnC,CAArB;AACA,MAAMM,WAAW,EAAEI,IAAI,MAAN,EAAcC,IAAI,MAAlB,EAAjB;AACAH,SAAOD,MAAP,EAAeE,OAAf,CAAuBH,QAAvB;AACD,CAJD;;AAMAD,KAAK,eAAL,EAAsB,kBAAY;AAChC,MAAME,SAAS,MAAMX,KAAK,EAAL,EAASC,QAAT,EAAmBI,aAAnB,EAAkC,KAAlC,CAArB;AACA,MAAMK,WAAW,EAAEI,IAAI,MAAN,EAAcC,IAAI,MAAlB,EAAjB;AACAH,SAAOD,MAAP,EAAeE,OAAf,CAAuBH,QAAvB;AACD,CAJD;;AAMAD,KAAK,wBAAL,EAA+B,kBAAY;AACzC,MAAME,SAAS,MAAMX,KAAK,EAAL,EAASC,QAAT,EAAmBK,sBAAnB,EAA2C,KAA3C,CAArB;AACA,MAAMI,WAAW,EAAEI,IAAI,MAAN,EAAcC,IAAI,MAAlB,EAA0BC,IAAI,MAA9B,EAAsCC,IAAI,MAA1C,EAAjB;AACAL,SAAOD,MAAP,EAAeE,OAAf,CAAuBH,QAAvB;AACD,CAJD;;AAMAD,KAAK,YAAL,EAAmB,kBAAY;AAC7B,MAAMC,WAAW,EAAjB;AACA,MAAMC,SAAS,MAAMX,KAAK,EAAL,EAASC,QAAT,EAAmBM,UAAnB,CAArB;AACAK,SAAOD,MAAP,EAAeE,OAAf,CAAuBH,QAAvB;AACD,CAJD","file":"basic.spec.js","sourcesContent":["const { call } = require('../index')\nconst { handlers, functions } = require('./effects')\nconst {\n  basic,\n  basicMultistep,\n  basicParallel,\n  basicMultistepParallel,\n  basicEmpty,\n  basicMultiArg\n} = functions\n\ntest('basic', async () => {\n  const expected = 'foo'\n  const actual = await call({}, handlers, basic, expected)\n  expect(actual).toEqual(expected)\n})\n\ntest('basic should be able to accept array arguments', async () => {\n  const expected = ['foo', 'bar']\n  const actual = await call({}, handlers, basic, expected)\n  expect(actual).toEqual(expected)\n})\n\ntest('basicMultiArg', async () => {\n  const actual = await call({}, handlers, basicMultiArg, 'foo', 'bar')\n  expect(actual).toEqual('foobar')\n})\n\ntest('basicMultistep', async () => {\n  const actual = await call({}, handlers, basicMultistep, 'foo')\n  const expected = { s1: 'foo1', s2: 'foo2' }\n  expect(actual).toEqual(expected)\n})\n\ntest('basicParallel', async () => {\n  const actual = await call({}, handlers, basicParallel, 'foo')\n  const expected = { s1: 'foo1', s2: 'foo2' }\n  expect(actual).toEqual(expected)\n})\n\ntest('basicMultistepParallel', async () => {\n  const actual = await call({}, handlers, basicMultistepParallel, 'foo')\n  const expected = { s1: 'foo1', s2: 'foo2', s3: 'foo3', s4: 'foo4' }\n  expect(actual).toEqual(expected)\n})\n\ntest('basicEmpty', async () => {\n  const expected = []\n  const actual = await call({}, handlers, basicEmpty)\n  expect(actual).toEqual(expected)\n})\n"]}