{"version":3,"sources":["../../src/specs/either.spec.js"],"names":["require","call","handlers","functions","eitherTestError","eitherTestEmpty","test","actual","expected","expect","toEqual"],"mappings":";;eAAiBA,QAAQ,UAAR,C;IAATC,I,YAAAA,I;;gBACwBD,QAAQ,WAAR,C;IAAxBE,Q,aAAAA,Q;IAAUC,S,aAAAA,S;;IACVC,e,GAAqCD,S,CAArCC,e;IAAiBC,e,GAAoBF,S,CAApBE,e;;;AAEzBC,KAAK,gEAAL,EAAuE,kBAAY;AACjF,MAAMC,SAAS,MAAMN,KAAK,EAAL,EAASC,QAAT,EAAmBE,eAAnB,CAArB;AACA,MAAMI,WAAW,KAAjB;AACAC,SAAOF,MAAP,EAAeG,OAAf,CAAuBF,QAAvB;AACD,CAJD;;AAMAF,KAAK,0FAAL,EAAiG,kBAAY;AAC3G,MAAMC,SAAS,MAAMN,KAAK,EAAL,EAASC,QAAT,EAAmBG,eAAnB,CAArB;AACA,MAAMG,WAAW,KAAjB;AACAC,SAAOF,MAAP,EAAeG,OAAf,CAAuBF,QAAvB;AACD,CAJD","file":"either.spec.js","sourcesContent":["const { call } = require('../index')\nconst { handlers, functions } = require('./effects')\nconst { eitherTestError, eitherTestEmpty } = functions\n\ntest('call should use either, handle error, and return default value', async () => {\n  const actual = await call({}, handlers, eitherTestError)\n  const expected = 'foo'\n  expect(actual).toEqual(expected)\n})\n\ntest('call should use either, handle error, and return default value if return value is falsey', async () => {\n  const actual = await call({}, handlers, eitherTestEmpty)\n  const expected = 'foo'\n  expect(actual).toEqual(expected)\n})\n"]}