{"version":3,"sources":["../../src/perf/fs.js"],"names":["require","call","handlers","eadBenchmark","standardBenchmark","iterations","filePath","testStandard","start","Date","now","i","end","testEAD","benchmark","console","log","standard","ead","diff","perTransaction","microSecondsPerTransaction","toFixed","catch","error"],"mappings":";;eAAiBA,QAAQ,UAAR,C;IAATC,I,YAAAA,I;;AACR,IAAMC,WAAWF,QAAQ,oBAAR,CAAjB;;gBACyBA,QAAQ,qBAAR,C;IAAjBG,Y,aAAAA,Y;;gBACsBH,QAAQ,YAAR,C;IAAtBI,iB,aAAAA,iB;;AAER,IAAMC,aAAa,OAAO,EAA1B;;AAEA,IAAMC,WAAW,eAAjB;;AAEA,eAAeC,YAAf,GAA8B;AAC5B,MAAMC,QAAQC,KAAKC,GAAL,EAAd;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIN,UAApB,EAAgCM,GAAhC,EAAqC;AACnC,UAAMP,kBAAkBE,QAAlB,CAAN;AACD;AACD,MAAMM,MAAMH,KAAKC,GAAL,EAAZ;AACA,SAAOE,MAAMJ,KAAb;AACD;;AAED,eAAeK,OAAf,GAAyB;AACvB,MAAML,QAAQC,KAAKC,GAAL,EAAd;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIN,UAApB,EAAgCM,GAAhC,EAAqC;AACnC,UAAMV,KAAK,EAAL,EAASC,QAAT,EAAmBC,YAAnB,EAAiCG,QAAjC,CAAN;AACD;AACD,MAAMM,MAAMH,KAAKC,GAAL,EAAZ;AACA,SAAOE,MAAMJ,KAAb;AACD;;AAED,eAAeM,SAAf,GAA2B;AACzBC,UAAQC,GAAR,CAAY,2CAAZ;AACA,MAAMC,WAAW,MAAMV,cAAvB;AACA,MAAMW,MAAM,MAAML,SAAlB;AACA,MAAMM,OAAOD,MAAMD,QAAnB;AACA,MAAMG,iBAAiBD,OAAOd,UAA9B;AACA,MAAMgB,6BAA6B,CAACD,iBAAiB,IAAlB,EAAwBE,OAAxB,CAAgC,CAAhC,CAAnC;AACAP,UAAQC,GAAR,oBAA6BX,UAA7B,uBAAyDc,IAAzD;AACAJ,UAAQC,GAAR,iCAA0CK,0BAA1C;AACD;;AAEDP,YAAYS,KAAZ,CAAkBR,QAAQS,KAA1B","file":"fs.js","sourcesContent":["const { call } = require('../index')\nconst handlers = require('./effects/handlers')\nconst { eadBenchmark } = require('./effects/functions')\nconst { standardBenchmark } = require('./standard')\n\nconst iterations = 1000 * 50\n\nconst filePath = '/tmp/perf.txt'\n\nasync function testStandard() {\n  const start = Date.now()\n  for (let i = 0; i < iterations; i++) {\n    await standardBenchmark(filePath)\n  }\n  const end = Date.now()\n  return end - start\n}\n\nasync function testEAD() {\n  const start = Date.now()\n  for (let i = 0; i < iterations; i++) {\n    await call({}, handlers, eadBenchmark, filePath)\n  }\n  const end = Date.now()\n  return end - start\n}\n\nasync function benchmark() {\n  console.log('Wait while operation runs 50,000 times...')\n  const standard = await testStandard()\n  const ead = await testEAD()\n  const diff = ead - standard\n  const perTransaction = diff / iterations\n  const microSecondsPerTransaction = (perTransaction * 1000).toFixed(2)\n  console.log(`Differnce for ${iterations} transactions: ${diff}ms`)\n  console.log(`Differnce per transaction: ${microSecondsPerTransaction}Î¼s`)\n}\n\nbenchmark().catch(console.error)\n"]}