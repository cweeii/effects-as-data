{"version":3,"sources":["../src/test.js"],"names":["assert","require","curry","chunk","testRunner","fn","expected","index","previousOutput","checkForExpectedTypeMismatches","step","undefined","Error","input","expectedOutput","g","next","apply","output","isError","throw","e","value","done","deepEqual","name","length","Array","isArray","i","nextInput","testFn","spec","expectedLog","testFnV2","flat","reduce","p","log","push","v1Log","actual","expect","extend","anything","toEqual","args","fnArgs","t","yieldCmd","returns","v","yieldReturns","a","alt","module","exports"],"mappings":";;;;;;AAAA,IAAMA,SAASC,QAAQ,QAAR,CAAf;AACA,IAAMC,QAAQD,QAAQ,cAAR,CAAd;AACA,IAAME,QAAQF,QAAQ,cAAR,CAAd;;AAEA,IAAMG,aAAa,SAAbA,UAAa,CAACC,EAAD,EAAKC,QAAL,EAAoD;AAAA,MAArCC,KAAqC,uEAA7B,CAA6B;AAAA,MAA1BC,cAA0B,uEAAT,IAAS;;AACrEC,iCAA+BH,QAA/B;;AAEAN,SAAOK,EAAP,EAAW,mDAAX;;AAEA,MAAMK,OAAOJ,SAASC,KAAT,CAAb;;AAEA,MAAIG,SAASC,SAAb,EAAwB;AACtB,UAAM,IAAIC,KAAJ,CACJ,yFADI,CAAN;AAGD;;AAXoE,6BAarCF,IAbqC;AAAA,MAa9DG,KAb8D;AAAA,MAavDC,cAbuD;;AAcrE,MAAIC,UAAJ;AACA,MAAIV,GAAGW,IAAP,EAAa;AACXD,QAAIV,EAAJ;AACD,GAFD,MAEO;AACLU,QAAIV,GAAGY,KAAH,CAAS,IAAT,EAAeJ,KAAf,CAAJ;AACD;;AAED,MAAIK,eAAJ;AACA,MAAIC,QAAQN,KAAR,CAAJ,EAAoB;AAClB,QAAI;AACFK,eAASH,EAAEK,KAAF,CAAQP,KAAR,CAAT;AACD,KAFD,CAEE,OAAOQ,CAAP,EAAU;AACVH,eAAS,EAAEI,OAAOD,CAAT,EAAYE,MAAM,IAAlB,EAAT;AACD;AACF,GAND,MAMO;AACLL,aAASH,EAAEC,IAAF,CAAOH,KAAP,CAAT;AACD;;AAED,MAAI;AACFW,cAAUN,OAAOI,KAAjB,EAAwBR,cAAxB;AACD,GAFD,CAEE,OAAOO,CAAP,EAAU;AACVA,MAAEI,IAAF,uBAA0BlB,QAAQ,CAAlC;AACA,UAAMc,CAAN;AACD;;AAED,MAAI,CAACH,OAAOK,IAAR,IAAgBhB,QAAQ,CAAR,GAAYD,SAASoB,MAAzC,EAAiD;AAC/CtB,eAAWW,CAAX,EAAcT,QAAd,EAAwBC,QAAQ,CAAhC,EAAmCW,OAAOI,KAA1C;AACD;AACF,CA1CD;;AA4CA,SAASH,OAAT,CAAiBE,CAAjB,EAAoB;AAClB,MAAI,CAACA,CAAL,EAAQ,OAAO,KAAP;AACR,SAAOA,aAAaT,KAApB;AACD;;AAED,IAAMH,iCAAiC,SAAjCA,8BAAiC,WAAY;AACjD,MAAI,CAACkB,MAAMC,OAAN,CAActB,QAAd,CAAL,EAA8B;AAC5B,UAAM,IAAIM,KAAJ,oGAC4FN,QAD5F,yCAC4FA,QAD5F,UAAN;AAGD;AACD,OAAK,IAAIuB,IAAI,CAAb,EAAgBA,IAAIvB,SAASoB,MAA7B,EAAqCG,GAArC,EAA0C;AACxC,QAAIA,IAAI,CAAJ,IAASvB,SAASoB,MAAtB,EAA8B;AAC9B,QAAIR,SAASZ,SAASuB,CAAT,EAAY,CAAZ,CAAb;AACA,QAAIC,YAAYxB,SAASuB,IAAI,CAAb,EAAgB,CAAhB,CAAhB;;AAEA,QAAIF,MAAMC,OAAN,CAAcV,MAAd,CAAJ,EAA2B;AACzBlB,aACE2B,MAAMC,OAAN,CAAcE,SAAd,CADF,EAEE,0EAFF;AAID;AACF;AACF,CAlBD;;AAoBA,IAAMC,SAAS,SAATA,MAAS,CAAC1B,EAAD,EAAK2B,IAAL,EAAc;AAC3B,SAAO,YAAW;AAChB,QAAIC,cAAcD,MAAlB;AACA5B,eAAWC,EAAX,EAAe4B,WAAf;AACD,GAHD;AAID,CALD;;AAOA,IAAMC,WAAW,SAAXA,QAAW,CAAC7B,EAAD,EAAK2B,IAAL,EAAc;AAC7B,SAAO,YAAW;AAChB,QAAIC,cAAcD,MAAlB;AACA,QAAMG,OAAOF,YAAYG,MAAZ,CAAmB,UAACC,CAAD,EAAI3B,IAAJ,EAAUH,KAAV,EAAiB+B,GAAjB,EAAyB;AACvD,UAAI/B,UAAU,CAAV,IAAeA,UAAU+B,IAAIZ,MAAJ,GAAa,CAA1C,EAA6C;AAC3CW,UAAEE,IAAF,CAAO7B,IAAP;AACA,eAAO2B,CAAP;AACD;;AAEDA,QAAEE,IAAF,CAAO7B,KAAK,CAAL,CAAP;AACA2B,QAAEE,IAAF,CAAO7B,KAAK,CAAL,CAAP;AACA,aAAO2B,CAAP;AACD,KATY,EASV,EATU,CAAb;AAUA,QAAMG,QAAQrC,MAAMgC,IAAN,EAAY,CAAZ,CAAd;AACA/B,eAAWC,EAAX,EAAemC,KAAf;AACD,GAdD;AAeD,CAhBD;;AAkBA,SAAShB,SAAT,CAAmBiB,MAAnB,EAA2BnC,QAA3B,EAAqC;AACnC;AACA,MAAI,OAAOoC,MAAP,KAAkB,WAAlB,IAAiCA,OAAOC,MAAxC,IAAkDD,OAAOE,QAA7D,EAAuE;AACrEF,WAAOD,MAAP,EAAeI,OAAf,CAAuBvC,QAAvB;AACD,GAFD,MAEO;AACLN,WAAOwB,SAAP,CAAiBiB,MAAjB,EAAyBnC,QAAzB;AACD;AACF;;AAED;AACA,IAAMwC,OAAO,SAAPA,IAAO,GAAe;AAAA,oCAAXC,MAAW;AAAXA,UAAW;AAAA;;AAC1B,MAAMC,IAAI,CAAC,CAACD,MAAD,CAAD,CAAV;AACA,SAAO,EAAEE,UAAUA,SAASD,CAAT,CAAZ,EAAyBE,SAASA,QAAQF,CAAR,CAAlC,EAAP;AACD,CAHD;;AAKA,IAAMC,WAAW/C,MAAM,UAAC8C,CAAD,EAAIG,CAAJ,EAAU;AAC/BH,IAAEA,EAAEtB,MAAF,GAAW,CAAb,EAAgB,CAAhB,IAAqByB,CAArB;AACA,SAAO;AACLC,kBAAcA,aAAaJ,CAAb;AADT,GAAP;AAGD,CALgB,CAAjB;;AAOA,IAAMI,eAAelD,MAAM,UAAC8C,CAAD,EAAIG,CAAJ,EAAU;AACnCH,IAAEA,EAAEtB,MAAJ,IAAc,CAACyB,CAAD,CAAd;;AAEA,SAAO;AACLF,cAAUA,SAASD,CAAT,CADL;AAELE,aAASA,QAAQF,CAAR;AAFJ,GAAP;AAID,CAPoB,CAArB;;AASA,IAAME,UAAUhD,MAAM,UAAC8C,CAAD,EAAIK,CAAJ,EAAU;AAC9BL,IAAEA,EAAEtB,MAAF,GAAW,CAAb,EAAgB,CAAhB,IAAqB2B,CAArB;AACA,SAAOL,CAAP;AACD,CAHe,CAAhB;;AAKA;AACA,SAASM,GAAT,GAAe,CAAE;;AAEjBC,OAAOC,OAAP,GAAiB;AACfpD,wBADe;AAEf2B,UAAQ7B,MAAM6B,MAAN,EAAc,CAAd,CAFO;AAGfG,YAAUhC,MAAMgC,QAAN,EAAgB,CAAhB,CAHK;AAIfoB,UAJe;AAKfR;AALe,CAAjB","file":"test.js","sourcesContent":["const assert = require('assert')\nconst curry = require('lodash/curry')\nconst chunk = require('lodash/chunk')\n\nconst testRunner = (fn, expected, index = 0, previousOutput = null) => {\n  checkForExpectedTypeMismatches(expected)\n\n  assert(fn, 'The function you are trying to test is undefined.')\n\n  const step = expected[index]\n\n  if (step === undefined) {\n    throw new Error(\n      'Your spec does not have as many steps as your function.  Are you missing a return line?'\n    )\n  }\n\n  const [input, expectedOutput] = step\n  let g\n  if (fn.next) {\n    g = fn\n  } else {\n    g = fn.apply(null, input)\n  }\n\n  let output\n  if (isError(input)) {\n    try {\n      output = g.throw(input)\n    } catch (e) {\n      output = { value: e, done: true }\n    }\n  } else {\n    output = g.next(input)\n  }\n\n  try {\n    deepEqual(output.value, expectedOutput)\n  } catch (e) {\n    e.name = `Error on Step ${index + 1}`\n    throw e\n  }\n\n  if (!output.done || index + 1 < expected.length) {\n    testRunner(g, expected, index + 1, output.value)\n  }\n}\n\nfunction isError(e) {\n  if (!e) return false\n  return e instanceof Error\n}\n\nconst checkForExpectedTypeMismatches = expected => {\n  if (!Array.isArray(expected)) {\n    throw new Error(\n      `Your spec must return an array of tuples.  It is currently returning a value of type \"${typeof expected}\".`\n    )\n  }\n  for (let i = 0; i < expected.length; i++) {\n    if (i + 1 >= expected.length) return\n    let output = expected[i][1]\n    let nextInput = expected[i + 1][0]\n\n    if (Array.isArray(output)) {\n      assert(\n        Array.isArray(nextInput),\n        'If an array of actions is yielded, it should return an array of results.'\n      )\n    }\n  }\n}\n\nconst testFn = (fn, spec) => {\n  return function() {\n    let expectedLog = spec()\n    testRunner(fn, expectedLog)\n  }\n}\n\nconst testFnV2 = (fn, spec) => {\n  return function() {\n    let expectedLog = spec()\n    const flat = expectedLog.reduce((p, step, index, log) => {\n      if (index === 0 || index === log.length - 1) {\n        p.push(step)\n        return p\n      }\n\n      p.push(step[0])\n      p.push(step[1])\n      return p\n    }, [])\n    const v1Log = chunk(flat, 2)\n    testRunner(fn, v1Log)\n  }\n}\n\nfunction deepEqual(actual, expected) {\n  //  a little bit of jest support\n  if (typeof expect !== 'undefined' && expect.extend && expect.anything) {\n    expect(actual).toEqual(expected)\n  } else {\n    assert.deepEqual(actual, expected)\n  }\n}\n\n// Semantic test builder\nconst args = (...fnArgs) => {\n  const t = [[fnArgs]]\n  return { yieldCmd: yieldCmd(t), returns: returns(t) }\n}\n\nconst yieldCmd = curry((t, v) => {\n  t[t.length - 1][1] = v\n  return {\n    yieldReturns: yieldReturns(t)\n  }\n})\n\nconst yieldReturns = curry((t, v) => {\n  t[t.length] = [v]\n\n  return {\n    yieldCmd: yieldCmd(t),\n    returns: returns(t)\n  }\n})\n\nconst returns = curry((t, a) => {\n  t[t.length - 1][1] = a\n  return t\n})\n\n// Modified tuples\nfunction alt() {}\n\nmodule.exports = {\n  testRunner,\n  testFn: curry(testFn, 2),\n  testFnV2: curry(testFnV2, 2),\n  alt,\n  args\n}\n"]}